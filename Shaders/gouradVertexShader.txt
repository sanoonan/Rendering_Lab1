#version 400

layout(location = 0) in vec3 vertex_position;
layout(location = 1) in vec3 vertex_normal;
layout(location = 2) in vec2 vertex_texture;

uniform vec3 ka;
uniform vec3 kd;
uniform vec3 ks;
uniform float spec_ex;

out vec3 LightIntensity;


uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;



uniform vec4 LightPosition; // Light position in world coords.

uniform vec3 La;
uniform vec3 Ld; 
uniform vec3 Ls; 




void main(){



	mat4 ModelViewMatrix = view * model;
	mat3 NormalMatrix =  mat3(ModelViewMatrix);
	// Convert normal and position to eye coords
	// Normal in view space
	vec3 direction_to_light_eye = normalize( NormalMatrix * vertex_normal);
	// Position in view space
	vec4 position_eye = ModelViewMatrix * vec4(vertex_position,1.0);
	//normalised vector towards the light source
	vec3 normal_eye = normalize(vec3(LightPosition - position_eye));
  
	// The diffuse shading equation, dot product gives us the cosine of angle between the vectors
	vec3 Id = Ld * kd * max( dot( normal_eye, direction_to_light_eye ), 0.0 );

	vec3 Ia = La * ka;




	vec3 reflection_eye = reflect (-direction_to_light_eye, normal_eye);

	vec3 surface_to_viewer_eye = vec3(normalize (-position_eye));

	float dot_prod_specular = dot (reflection_eye, surface_to_viewer_eye);

	dot_prod_specular = max (dot_prod_specular, 0.0);

	float specular_factor = pow (dot_prod_specular, spec_ex);

	vec3 Is = Ls * ks * specular_factor; // final specular intensity
	



//	vec3 Is = vec3(0.0, 0.0, 0.0);



	LightIntensity = Ia + Id + Is;
  
	// Convert position to clip coordinates and pass along
	gl_Position = proj * view * model * vec4(vertex_position, 1.0);


}


  