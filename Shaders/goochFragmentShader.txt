#version 400

uniform vec3 ka;
uniform vec3 kd;
uniform vec3 ks;
uniform float spec_ex;

uniform vec4 LightPosition; 

uniform vec3 La;
uniform vec3 Ld; 
uniform vec3 Ls; 

in vec3 direction_to_light_eye;
in vec4 position_eye;

uniform vec3 kcool;
uniform vec3 kwarm;

float alpha = 0;
float beta = 0;

void main()
{


	vec3 kcdiff = kcool + alpha * kd;
	vec3 kwdiff = kwarm + beta * kd;

	vec3 _direction_to_light_eye = normalize(direction_to_light_eye);
	vec4 _position_eye = normalize(position_eye);
 
    //normalised vector towards the light source
	vec3 normal_eye = normalize(vec3(LightPosition - _position_eye));
  	
	float dot_prod = dot(normal_eye, _direction_to_light_eye );

	float frac = (1+dot_prod)/2;

	vec3 kdfinal = frac*kwdiff + (1-frac)*kcdiff;

	vec3 Id = Ld * kdfinal;

	vec3 reflection_eye = reflect (-_direction_to_light_eye, normal_eye);

	vec3 surface_to_viewer_eye = vec3(normalize (-_position_eye));

	float dot_prod_specular = dot (reflection_eye, surface_to_viewer_eye);

	dot_prod_specular = max (dot_prod_specular, 0.0);

	float specular_factor = pow (dot_prod_specular, spec_ex);

	vec3 Is = Ls * ks * specular_factor; // final specular intensity

	vec3 LightIntensity = Id + Is;

	gl_FragColor = vec4 (LightIntensity, 1.0);
}